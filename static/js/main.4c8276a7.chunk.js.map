{"version":3,"sources":["App.tsx","index.tsx"],"names":["SortType","goodsFromServer","App","useState","NONE","sortType","setSortType","isReversed","setReverse","isSorted","goods","visibleGoods","sort","g1","g2","ALPHABET","localeCompare","LENGTH","length","reverse","getReorderedGoods","className","type","onClick","prevReverse","map","good","ReactDOM","render","document","getElementById"],"mappings":"6KAiBKA,E,0DAbQC,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,W,SAGGD,O,eAAAA,I,uBAAAA,I,oBAAAA,M,KAoCE,IAAME,EAAgB,WAC3B,MAAgCC,mBAASH,EAASI,MAAlD,mBAAOC,EAAP,KAAiBC,EAAjB,KACA,EAAiCH,oBAAS,GAA1C,mBAAOI,EAAP,KAAmBC,EAAnB,KAEMC,EAAWJ,IAAaL,EAASI,KAmBjCM,EAhDD,SACLA,EADK,GAGJ,IADCL,EACF,EADEA,SAAUE,EACZ,EADYA,WAENI,EAAY,YAAOD,GAkBzB,OAhBAC,EAAaC,MAAK,SAACC,EAAIC,GACrB,OAAQT,GACN,KAAKL,EAASe,SACZ,OAAOF,EAAGG,cAAcF,GAE1B,KAAKd,EAASiB,OACZ,OAAOJ,EAAGK,OAASJ,EAAGI,OACxB,QACE,OAAOlB,EAASI,SAIlBG,GACFI,EAAaQ,UAGRR,EA0BOS,CAAkBnB,EAAiB,CAAEI,WAAUE,eAE7D,OACE,sBAAKc,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,KAAK,SACLD,UAAS,yBAAoBhB,IAAaL,EAASe,UAAY,YAC/DQ,QAzBe,WACrBjB,EAAYN,EAASe,WAqBjB,iCAOA,wBACEO,KAAK,SACLD,UAAS,4BAAuBhB,IAAaL,EAASiB,QAAU,YAChEM,QA5Ba,WACnBjB,EAAYN,EAASiB,SAwBjB,4BAOA,wBACEK,KAAK,SACLD,UAAS,6BAAwBd,GAAc,YAC/CgB,QA/BQ,WACdf,GAAW,SAACgB,GAAD,OAAkBA,MA2BzB,sBAOEf,GAAYF,IACZ,wBACEe,KAAK,SACLD,UAAU,4BACVE,QAnCI,WACZjB,EAAYN,EAASI,MACrBI,GAAW,IA8BL,sBASJ,6BACE,6BACGE,EAAMe,KAAI,SAAAC,GAAI,OAAI,oBAAI,UAAQ,OAAZ,SAA+BA,GAAPA,cC/GrDC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.4c8276a7.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport './App.scss';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nenum SortType {\n  NONE,\n  ALPHABET,\n  LENGTH,\n}\n\ntype ReorderOptions = {\n  sortType: SortType,\n  isReversed: boolean,\n};\n\nexport function getReorderedGoods(\n  goods: string[],\n  { sortType, isReversed }: ReorderOptions,\n) {\n  const visibleGoods = [...goods];\n\n  visibleGoods.sort((g1, g2) => {\n    switch (sortType) {\n      case SortType.ALPHABET:\n        return g1.localeCompare(g2);\n\n      case SortType.LENGTH:\n        return g1.length - g2.length;\n      default:\n        return SortType.NONE;\n    }\n  });\n\n  if (isReversed) {\n    visibleGoods.reverse();\n  }\n\n  return visibleGoods;\n}\n\nexport const App: React.FC = () => {\n  const [sortType, setSortType] = useState(SortType.NONE);\n  const [isReversed, setReverse] = useState(false);\n\n  const isSorted = sortType !== SortType.NONE;\n\n  const sortByAlphabet = () => {\n    setSortType(SortType.ALPHABET);\n  };\n\n  const sortByLength = () => {\n    setSortType(SortType.LENGTH);\n  };\n\n  const reverse = () => {\n    setReverse((prevReverse) => !prevReverse);\n  };\n\n  const reset = () => {\n    setSortType(SortType.NONE);\n    setReverse(false);\n  };\n\n  const goods = getReorderedGoods(goodsFromServer, { sortType, isReversed });\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          className={`button is-info ${sortType !== SortType.ALPHABET && 'is-light'}`}\n          onClick={sortByAlphabet}\n        >\n          Sort alphabetically\n        </button>\n        <button\n          type=\"button\"\n          className={`button is-success ${sortType !== SortType.LENGTH && 'is-light'}`}\n          onClick={sortByLength}\n        >\n          Sort by length\n        </button>\n        <button\n          type=\"button\"\n          className={`button is-warning ${!isReversed && 'is-light'}`}\n          onClick={reverse}\n        >\n          Reverse\n        </button>\n        {(isSorted || isReversed) && (\n          <button\n            type=\"button\"\n            className=\"button is-danger is-light\"\n            onClick={reset}\n          >\n            Reset\n          </button>\n        )}\n      </div>\n      <ul>\n        <ul>\n          {goods.map(good => <li data-cy=\"Good\" key={good}>{good}</li>)}\n        </ul>\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}